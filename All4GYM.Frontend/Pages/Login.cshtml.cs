using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace All4GYM.Frontend.Pages;

public class LoginModel : PageModel
{
    [BindProperty]
    [Required(ErrorMessage = "Email –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π")]
    [EmailAddress(ErrorMessage = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email")]
    public string Email { get; set; } = "";

    [BindProperty]
    [Required(ErrorMessage = "–ü–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π")]
    [MinLength(6, ErrorMessage = "–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤")]
    public string Password { get; set; } = "";

    public string? ErrorMessage { get; set; }

    public async Task<IActionResult> OnPostAsync()
    {
        // üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        if (!ModelState.IsValid)
        {
            Console.WriteLine("‚ùå Model validation failed");
            return Page();
        }

        try
        {
            using var http = new HttpClient();
            http.BaseAddress = new Uri("http://localhost:5092/");

            var payload = new
            {
                email = Email,
                password = Password
            };

            var jsonPayload = JsonSerializer.Serialize(payload);
            Console.WriteLine($"üì§ Sending login payload: {jsonPayload}");

            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await http.PostAsync("api/User/login", content);

            Console.WriteLine($"üîÅ Status code: {response.StatusCode}");

            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"üîÉ Response body: {responseBody}");

            if (response.IsSuccessStatusCode)
            {
                var token = JsonDocument.Parse(responseBody).RootElement.GetProperty("token").GetString();

                Console.WriteLine("‚úÖ Login successful. Token received.");

                Response.Cookies.Append("jwt", token!, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = false, // –¥–ª—è dev
                    SameSite = SameSiteMode.Strict,
                    Expires = DateTimeOffset.UtcNow.AddDays(7)
                });

                return RedirectToPage("/Profile");
            }
            else
            {
                ErrorMessage = "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.";
                return Page();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• Exception during login: {ex.Message}");
            ErrorMessage = "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
            return Page();
        }
    }
}
