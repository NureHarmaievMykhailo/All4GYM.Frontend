using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using All4GYM.Frontend.Helpers;

namespace All4GYM.Frontend.Pages;

public class SubscriptionsModel : BasePageModel
{
    private readonly IHttpClientFactory _httpClientFactory;

    public SubscriptionsModel(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }

    public string GetTierDescription(string tier) => tier switch
    {
        "Basic" => "–î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏",
        "Pro" => "–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, –≤—ñ–¥–µ–æ, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
        "Premium" => "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó",
        _ => ""
    };

    public async Task<IActionResult> OnPostSubscribeAsync(string tier)
    {
        Console.WriteLine($"üì¶ –û–±—Ä–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É: {tier}");

        if (string.IsNullOrWhiteSpace(tier))
        {
            ModelState.AddModelError(string.Empty, "–ù–µ –æ–±—Ä–∞–Ω–æ —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–ø–∏—Å–∫–∏.");
            return Page();
        }

        var client = _httpClientFactory.CreateClient();
        client.BaseAddress = new Uri("http://localhost:5092/"); // –ó–∞–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ—ó
        var jwt = Request.Cookies["jwt"];
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

        var response = await client.PostAsync($"api/Checkout/{tier}", null);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<CheckoutResponse>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (!string.IsNullOrWhiteSpace(result?.Url))
            {
                return Redirect(result.Url);
            }

            ModelState.AddModelError(string.Empty, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è –æ–ø–ª–∞—Ç–∏.");
            return Page();
        }

        var errorBody = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"‚ùå Stripe error: {errorBody}");
        ModelState.AddModelError(string.Empty, $"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏: {errorBody}");
        return Page();
    }
    
    public async Task<IActionResult> OnPostCancelSubscriptionAsync()
    {
        var jwt = Request.Cookies["jwt"];
        var client = _httpClientFactory.CreateClient();
        client.BaseAddress = new Uri("http://localhost:5092/");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

        var response = await client.PostAsync("api/Subscription/cancel", null);
        if (response.IsSuccessStatusCode)
        {
            TempData["SuccessMessage"] = "–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.";
            return RedirectToPage();
        }

        var error = await response.Content.ReadAsStringAsync();
        ModelState.AddModelError(string.Empty, $"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}");
        return Page();
    }


    public class CheckoutResponse
    {
        [JsonPropertyName("url")]
        public string Url { get; set; } = string.Empty;
    }
}
